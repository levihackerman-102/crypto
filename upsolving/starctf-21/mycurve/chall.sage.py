

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100)
from Crypto.Util.number import bytes_to_long
from flag import flag
assert flag[:_sage_const_5 ]=='*CTF{' and flag[-_sage_const_1 ]=='}'
flag=flag[_sage_const_5 :-_sage_const_1 ]
def add(P,Q):
	if Q==_sage_const_0 :
		return P
	x1,y1=P
	x2,y2=Q
	return (d1*(x1+x2)+d2*(x1+y1)*(x2+y2)+(x1+x1**_sage_const_2 )*(x2*(y1+y2+_sage_const_1 )+y1*y2))/(d1+(x1+x1**_sage_const_2 )*(x2+y2)),(d1*(y1+y2)+d2*(x1+y1)*(x2+y2)+(y1+y1**_sage_const_2 )*(y2*(x1+x2+_sage_const_1 )+x1*x2))/(d1+(y1+y1**_sage_const_2 )*(x2+y2))

def mul(k,P):
	Q=(_sage_const_0 ,_sage_const_0 )
	while k>_sage_const_0 :
		if is_even(k):
			k/=_sage_const_2 
			P=add(P,P)
		else:
			k-=_sage_const_1 
			Q=add(P,Q)
	return Q

F=GF(_sage_const_2 **_sage_const_100 )
R = F['x, y']; (x, y,) = R._first_ngens(2)
d1=F.fetch_int(_sage_const_1 )
d2=F.fetch_int(_sage_const_1 )
x,y=(698546134536218110797266045394 , 1234575357354908313123830206394 )
G=(F.fetch_int(x),F.fetch_int(y))
P=mul(bytes_to_long(flag),G)
print (G[_sage_const_0 ].integer_representation(),G[_sage_const_1 ].integer_representation())
print (P[_sage_const_0 ].integer_representation(),P[_sage_const_1 ].integer_representation())
#(698546134536218110797266045394L, 1234575357354908313123830206394L)
#(403494114976379491717836688842L, 915160228101530700618267188624L)

